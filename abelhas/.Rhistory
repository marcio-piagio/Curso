dist = "negbin", data = dadosModelo,
link = "log")
modelo.4.2 <- pscl::zeroinfl(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias|
`Comp. Canudo (cm)`+ `N° discos` + `Tam. Discos (cm)` + `Peso (Kg)`,
dist = "negbin", data = dadosModelo,
link = "log")
require(dplyr)
# require(ggplot2)
# require(Rmisc)
# require(reshape)
# require(statmod)
# require(hnp)
# require(ggformula)
# require(MASS)
# require(pscl)
Dados_abelhas <- readxl::read_excel("Dados abelhas.xlsx")
Dados_abelhas$Meses <- dplyr::case_when(
Dados_abelhas$Meses == 1 ~ "Jan",
Dados_abelhas$Meses == 2 ~ "Fer",
Dados_abelhas$Meses == 3 ~ "Mar",
Dados_abelhas$Meses == 4 ~ "Abr",
Dados_abelhas$Meses == 5 ~ "Mai",
Dados_abelhas$Meses == 6 ~ "Jun",
Dados_abelhas$Meses == 7 ~ "Jul",
Dados_abelhas$Meses == 8 ~ "Ago",
Dados_abelhas$Meses == 9 ~ "Set",
Dados_abelhas$Meses == 10 ~ "Out",
Dados_abelhas$Meses == 11 ~ "Nov",
TRUE ~ "Dez"
)
Dados_abelhas$Meses <- factor(Dados_abelhas$Meses,
levels = c("Jan", "Fer", "Mar", "Abr", "Mai", "Jun",
"Jul", "Ago", "Set", "Out", "Nov", "Dez" ))
mediana <- tapply(Dados_abelhas$`N° potes Mel`, Dados_abelhas$Colônias, median)
Dados_abelhas$Colônias <- factor(Dados_abelhas$Colônias, levels = names(mediana)[order(mediana)])
bar <- Dados_abelhas %>% group_by(Colônias) %>% summarise('N° potes Mel'= sum(`N° potes Mel`))
bar2 <- Dados_abelhas %>% group_by(Meses) %>% summarise('N° potes Mel'= sum(`N° potes Mel`))
bar3 <- Dados_abelhas %>% group_by(Colônias,Meses) %>% summarise("N° potes Mel"=sum(`N° potes Mel`))
bar4 <- Dados_abelhas %>% group_by(Colônias,Meses) %>% summarise("Est. Pop." = sum(`Est. Pop.`))
numerica <- Dados_abelhas[3:9]
sd <- tapply(Dados_abelhas$`N° potes Mel`, Dados_abelhas$Colônias, sd)
Dados_abelhas$Colônias <- factor(Dados_abelhas$Colônias, levels = names(sd)[order(sd)])
mediana <- tapply(Dados_abelhas$`N° potes Mel`, Dados_abelhas$Colônias, median)
Dados_abelhas$Colônias <- factor(Dados_abelhas$Colônias, levels = names(mediana)[order(mediana)])
################################################################################
dadosModelo <- Dados_abelhas[-c(1,9)]
modelo.1 <- glm(`N° potes Mel` ~ .,data = dadosModelo, family = poisson(link="log"))
modelo.2 <- MASS::glm.nb(`N° potes Mel` ~ `N° discos` + Colônias, data = dadosModelo)
summary(modelo.2)
sd <- tapply(Dados_abelhas$`N° potes Mel`, Dados_abelhas$Colônias, sd)
Dados_abelhas$Colônias <- factor(Dados_abelhas$Colônias, levels = names(sd)[order(sd)])
dadosModelo <- Dados_abelhas[-c(1,9)]
modelo.3 <- pscl::zeroinfl(`N° potes Mel` ~ .|1,
dist = "poisson", data = dadosModelo)
modelo.3.1 <- pscl::zeroinfl(`N° potes Mel` ~ .|`Comp. Canudo (cm)` + `Diâm. Canudo (cm)`+
`Tam. Discos (cm)`+ `Peso (Kg)`,
dist = "poisson", data = dadosModelo)
modelo.4 <- pscl::zeroinfl(`N° potes Mel` ~ .| 1,
dist = "negbin", data = dadosModelo)
modelo.4.2 <- pscl::zeroinfl(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias|
`Comp. Canudo (cm)`+ `N° discos` + `Tam. Discos (cm)` + `Peso (Kg)`,
dist = "negbin", data = dadosModelo,
link = "log")
# summary(modelo.4.2)
#
# library(hnp)
# hnp(modelo.4.2)
modelo.4.3 <- pscl::zeroinfl(`N° potes Mel` ~ .| `Comp. Canudo (cm)` + `Diâm. Canudo (cm)`+
`Tam. Discos (cm)`+ `Peso (Kg)`,
dist = "geometric", data = dadosModelo,)
# ## load pscl
library(pscl)
## fit hurdle model
modelo.5 <- hurdle(`N° potes Mel` ~ . | 1,data = dadosModelo,
dist = "poisson")
modelo.6 <- hurdle(`N° potes Mel` ~ . | 1,data = dadosModelo,
dist = "negbin")
modelo.6.1 <- hurdle(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias|
`Comp. Canudo (cm)`+ `N° discos` + `Tam. Discos (cm)` + `Peso (Kg)`,
dist = "negbin")
# summary(modelo.6.1)
# hnp(modelo.6.1)
# logLik(modelo.1)
# logLik(modelo.2)
# logLik(modelo.3)
# logLik(modelo.3.1)
# logLik(modelo.4)
# logLik(modelo.4.2)
# logLik(modelo.4.3)
# logLik(modelo.5)
# logLik(modelo.6)
# logLik(modelo.6.1)
# AIC(modelo.1)
# AIC(modelo.2)
# AIC(modelo.3)
# AIC(modelo.3.1)
# AIC(modelo.4)
# AIC(modelo.4.2)
# AIC(modelo.4.3)
# AIC(modelo.5)
# AIC(modelo.6)
# AIC(modelo.6.1)
tab1 <- data.frame("AIC" =c(AIC(modelo.1),AIC(modelo.2),AIC(modelo.3),AIC(modelo.4),AIC(modelo.5),AIC(modelo.6) ),
"logLik" = c(logLik(modelo.1)[1],logLik(modelo.2)[1],logLik(modelo.3)[1],logLik(modelo.4)[1],logLik(modelo.5)[1],logLik(modelo.6)[1]),
"df" = c(21,22,22,23,22,23),
"Dispersion"=c(disGlm(modelo.1,dadosModelo),disGlm(modelo.2,dadosModelo),disGlm(modelo.3,dadosModelo),disGlm(modelo.4,dadosModelo),
disGlm(modelo.5,dadosModelo),disGlm(modelo.6,dadosModelo)),
"dif"= abs(1-c(disGlm(modelo.1,dadosModelo),disGlm(modelo.2,dadosModelo),disGlm(modelo.3,dadosModelo),disGlm(modelo.4,dadosModelo),
disGlm(modelo.5,dadosModelo),disGlm(modelo.6,dadosModelo)))
)
row.names(tab1) <- paste0("modelo.",1:6)
res1 <- res(modelo.2)
modelo.4.2 <- pscl::zeroinfl(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias|
`Comp. Canudo (cm)`+ `N° discos` + `Tam. Discos (cm)` + `Peso (Kg)`,
dist = "negbin", data = dadosModelo,
link = "log")
modelo.4.2 <- pscl::zeroinfl(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias|
`Comp. Canudo (cm)`+ `N° discos` + `Tam. Discos (cm)` + `Peso (Kg)`,
dist = "negbin", data = dadosModelo)
library(INLA)
nyc.inla <- inla(`N° potes Mel` ~ . data = dadosModelo),
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ ., data = dadosModelo),
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias, data = dadosModelo),
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias, data = dadosModelo),
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` , data = dadosModelo),
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` , data = dadosModelo,
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias, data = dadosModelo,
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias, data = dadosModelo,
family = "poisson")
nyc.inla
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias, data = dadosModelo,
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias, data = dadosModelo,
family = "negbin")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias, data = dadosModelo,
family = "zeroinflatedbinomial0")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + as.factor(Colônias), data = dadosModelo,
family = "zeroinflatedbinomial0")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos`, data = dadosModelo,
family = "zeroinflatedbinomial0")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias, data = dadosModelo,
family = "zeroinflatedbinomial")
nyc.inla <- inla(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias, data = dadosModelo,
family = "zeroinflatedbinomial1")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$`N° discos` + dadosModelo$Colônias, data = dadosModelo,
family = "zeroinflatedbinomial1")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$`N° discos` + dadosModelo$Colônias, data = dadosModelo,
family = "zeroinflatedbinomial1")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$`N° discos` , data = dadosModelo,
family = "zeroinflatedbinomial1")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$`N° discos` , data = dadosModelo,
family = "zeroinflatedbinomial0")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$`N° discos` + dadosModelo$Colônias, data = dadosModelo,
family = "zeroinflatedbinomial0")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ ., data = dadosModelo,
family = "zeroinflatedbinomial0")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$Colônias, data = dadosModelo,
family = "zeroinflatedbinomial0")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$Colônias, data = dadosModelo,
family = "zeroinflatedbinomial1")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$Colônias, data = dadosModelo,
family = "zeroinflatedbinomial2")
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$Colônias, data = dadosModelo,
family = "zeroinflatedbinomial3")
nyc.stops <- read.table(file = "data/frisk_with_noise.dat", skip = 6,
header = TRUE)
data <- http://www.stat.columbia.edu/~gelman/arm/examples/police/frisk_with_noise.dat
data <- 'http://www.stat.columbia.edu/~gelman/arm/examples/police/frisk_with_noise.dat'
nyc.stops <- read.table(file = data, skip = 6,
header = TRUE)
nyc.stops
# Add labels to factors
nyc.stops$eth <- as.factor(nyc.stops$eth)
nyc.stops$eth
nyc.stops$eth
levels(nyc.stops$eth) <- c("black", "hispanic", "white")
nyc.stops$eth <- relevel(nyc.stops$eth, "white")
nyc.stops$crime <- as.factor(nyc.stops$crime)
levels(nyc.stops$crime) <- c("violent", "weapons", "property", "drug")
nyc.stops.agg <- aggregate(cbind(stops, past.arrests, pop) ~ precinct + eth,
data = nyc.stops, sum)
# Population is summed 4 times
nyc.stops.agg$pop <- nyc.stops.agg$pop / 4
nyc.stops.agg
nyc.stops.agg
nyc.inla <- inla(stops ~ eth + f(precinct, model = "iid"),
data = nyc.stops.agg, offset = log((15 / 12) * past.arrests),
family = "poisson")
summary(nyc.inla)
summary(nyc.inla)
stops
nyc.stops.agg
Dados_abelhas$Meses <- factor(Dados_abelhas$Meses,
levels = c("Jan", "Fer", "Mar", "Abr", "Mai", "Jun",
"Jul", "Ago", "Set", "Out", "Nov", "Dez" ))
mediana <- tapply(Dados_abelhas$`N° potes Mel`, Dados_abelhas$Colônias, median)
Dados_abelhas$Colônias <- factor(Dados_abelhas$Colônias, levels = names(mediana)[order(mediana)])
bar <- Dados_abelhas %>% group_by(Colônias) %>% summarise('N° potes Mel'= sum(`N° potes Mel`))
bar2 <- Dados_abelhas %>% group_by(Meses) %>% summarise('N° potes Mel'= sum(`N° potes Mel`))
bar3 <- Dados_abelhas %>% group_by(Colônias,Meses) %>% summarise("N° potes Mel"=sum(`N° potes Mel`))
bar4 <- Dados_abelhas %>% group_by(Colônias,Meses) %>% summarise("Est. Pop." = sum(`Est. Pop.`))
numerica <- Dados_abelhas[3:9]
sd <- tapply(Dados_abelhas$`N° potes Mel`, Dados_abelhas$Colônias, sd)
Dados_abelhas$Colônias <- factor(Dados_abelhas$Colônias, levels = names(sd)[order(sd)])
mediana <- tapply(Dados_abelhas$`N° potes Mel`, Dados_abelhas$Colônias, median)
Dados_abelhas$Colônias <- factor(Dados_abelhas$Colônias, levels = names(mediana)[order(mediana)])
dadosModelo <- Dados_abelhas[-c(1,9)]
modelo.1 <- glm(`N° potes Mel` ~ .,data = dadosModelo, family = poisson(link="log"))
modelo.2 <- MASS::glm.nb(`N° potes Mel` ~ `N° discos` + Colônias, data = dadosModelo)
summary(modelo.2)
sd <- tapply(Dados_abelhas$`N° potes Mel`, Dados_abelhas$Colônias, sd)
Dados_abelhas$Colônias <- factor(Dados_abelhas$Colônias, levels = names(sd)[order(sd)])
dadosModelo <- Dados_abelhas[-c(1,9)]
modelo.3 <- pscl::zeroinfl(`N° potes Mel` ~ .|1,
dist = "poisson", data = dadosModelo)
modelo.3.1 <- pscl::zeroinfl(`N° potes Mel` ~ .|`Comp. Canudo (cm)` + `Diâm. Canudo (cm)`+
`Tam. Discos (cm)`+ `Peso (Kg)`,
dist = "poisson", data = dadosModelo)
modelo.4 <- pscl::zeroinfl(`N° potes Mel` ~ .| 1,
dist = "negbin", data = dadosModelo)
modelo.4.2 <- pscl::zeroinfl(`N° potes Mel` ~ `Comp. Canudo (cm)`+`N° discos` + Colônias|
`Comp. Canudo (cm)`+ `N° discos` + `Tam. Discos (cm)` + `Peso (Kg)`,
dist = "negbin", data = dadosModelo)
library(INLA)
nyc.inla <- inla(`N° potes Mel` ~ Colônias, data = dadosModelo,
family = "zeroinflatedbinomial2")
dadosModelo$Colônias
dadosModelo$Colônias
order(dadosModelo$Colônias)
dadosModelo[order(dadosModelo$Colônias)]
dadosModelo[order(dadosModelo$Colônias),]
d = dadosModelo[order(dadosModelo$Colônias),]
View(d)
nyc.inla <- inla(`N° potes Mel` ~ Colônias, data = d,
family = "zeroinflatedbinomial2")
192/12
rep(1:12,16)
d$id <- rep(1:12,16)
nyc.inla <- inla(`N° potes Mel` ~ Colônias + f(id, model = "iid"), data = d,
family = "zeroinflatedbinomial2")
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + f(d$id, model = "iid"), data = d,
family = "zeroinflatedbinomial2")
class(d$Colônias)
levels(d$Colônias)
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + f(d$id, model = "iid"), data = d,
family = "poisson")
summary(nyc.inla)
nyc.inla <- inla(`N° potes Mel` ~ Colônias + f(id, model = "iid"), data = d,
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ Colônias + f(id, model = "iid"), data = d,
family = "poisson")
nyc.inla <- inla(`N° potes Mel` ~ . + f(id, model = "iid"), data = d,
family = "poisson")
nyc.inla <- inla(d$`N° potes Mel` ~ . + f(d$id, model = "iid"), data = d,
family = "poisson")
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + d$`Comp. Canudo (cm)`+ f(d$id, model = "iid"), data = d,
family = "poisson")
summary(nyc.inla)
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + d$`Comp. Canudo (cm)`+ f(d$id, model = "iid"), data = d,
family = "poisson1")
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + d$`Comp. Canudo (cm)`+ f(d$id, model = "iid"), data = d,
family = "zeroinflatednbinomial2")
summary(nyc.inla)
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + d$`Comp. Canudo (cm)`+ f(d$id, model = "iid"), data = d,
family = "zeroinflatednbinomial0")
summary(nyc.inla)
summary(nyc.inla)
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + d$`Comp. Canudo (cm)`+ f(d$id, model = "iid")|d$Colônias, data = d,
family = "zeroinflatednbinomial0")
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + d$`Comp. Canudo (cm)`+ f(d$id, model = "iid")|d$`N° discos`, data = d,
family = "zeroinflatednbinomial0")
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + d$`Comp. Canudo (cm)`+ f(d$id, model = "iid"), data = d,
family = "zeroinflatednbinomial0")
summary(nyc.inla)
summary(nyc.inla)
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + d$`Comp. Canudo (cm)`, data = d,
family = "zeroinflatednbinomial0")
summary(nyc.inla)
nyc.inla <- inla(dadosModelo$`N° potes Mel`~ dadosModelo$Colônias,
family = "zeroinflatednbinomial0")
nyc.inla <- inla(dadosModelo$`N° potes Mel`~ dadosModelo$Colônias,data = dadosModelo
family = "zeroinflatednbinomial0")
nyc.inla <- inla(d$`N° potes Mel` ~ d$Colônias + d$`Comp. Canudo (cm)`, data = d,
family = "zeroinflatednbinomial0")
summary(nyc.inla)
nyc.inla <- inla(dadosModelo$`N° potes Mel` ~ dadosModelo$Colônias + dadosModelo$`Comp. Canudo (cm)`, data = dadosModelo,
family = "zeroinflatednbinomial0")
summary(nyc.inla)
summary(nyc.inla)
library(caret)
library(tidymodels)
library(ipred)
data(scat)
force(scat)
View(scat)
View(scat)
scat_missing <-
scat %>%
mutate(
was_missing = ifelse(is.na(Diameter)| is.na(Mass), "yes", "no"),
was_missing = factor(was_missing, levels = c("yes", "no"))
)
scat_missing
View(scat_missing)
imp_knn <-
recipe(Species ~ ., data = scat) %>%
step_knnimpute(Diameter, Mass,
impute_with =
imp_vars(Month, Year, Site, Location,
Age, Number, Length, ropey,
segmented, scrape)) %>%
prep(training = scat, retain = TRUE) %>%
juice(Diameter, Mass) %>%
set_names(c("diam_imp", "mass_imp")) %>%
mutate(method = "5-Nearest Neighbors")
scat_missing <-
scat %>%
mutate(
was_missing = ifelse(is.na(Diameter)| is.na(Mass), "yes", "no"),
was_missing = factor(was_missing, levels = c("yes", "no"))
)
imp_knn <-
recipe(Species ~ ., data = scat) %>%
step_knnimpute(Diameter, Mass,
impute_with =
imp_vars(Month, Year, Site, Location,
Age, Number, Length, ropey,
segmented, scrape)) %>%
prep(training = scat, retain = TRUE) %>%
juice(Diameter, Mass) %>%
set_names(c("diam_imp", "mass_imp")) %>%
mutate(method = "5-Nearest Neighbors")
library(recipes)
imp_knn <-
recipe(Species ~ ., data = scat) %>%
step_knnimpute(Diameter, Mass,
impute_with =
imp_vars(Month, Year, Site, Location,
Age, Number, Length, ropey,
segmented, scrape)) %>%
prep(training = scat, retain = TRUE) %>%
juice(Diameter, Mass) %>%
set_names(c("diam_imp", "mass_imp")) %>%
mutate(method = "5-Nearest Neighbors")
imp_knn <-
recipe(Species ~ ., data = scat) %>%
step_knnimpute(Diameter, Mass,
impute_with =
imp_vars(Month, Year, Site, Location,
Age, Number, Length, ropey,
segmented, scrape)) %>%
prep(training = scat, retain = TRUE) %>%
juice(Diameter, Mass) %>%
set_names(c("diam_imp", "mass_imp")) %>%
mutate(method = "5-Nearest Neighbors")
scat_knn <- bind_cols(scat_missing, imp_knn)
imp_knn <-
recipe(Species ~ ., data = scat) %>%
step_knnimpute(Diameter, Mass,
impute_with =
imp_vars(Month, Year, Site, Location,
Age, Number, Length, ropey,
segmented, scrape)) %>%
prep(training = scat, retain = TRUE) %>%
juice(Diameter, Mass) %>%
set_names(c("diam_imp", "mass_imp")) %>%
mutate(method = "5-Nearest Neighbors")
library(recipes)
data(scat)
scat_missing <-
scat %>%
mutate(
was_missing = ifelse(is.na(Diameter)| is.na(Mass), "yes", "no"),
was_missing = factor(was_missing, levels = c("yes", "no"))
)
imp_knn <-
recipe(Species ~ ., data = scat) %>%
step_knnimpute(Diameter, Mass,
impute_with =
imp_vars(Month, Year, Site, Location,
Age, Number, Length, ropey,
segmented, scrape)) %>%
prep(training = scat, retain = TRUE) %>%
juice(Diameter, Mass) %>%
set_names(c("diam_imp", "mass_imp")) %>%
mutate(method = "5-Nearest Neighbors")
scat_knn <- bind_cols(scat_missing, imp_knn)
# Fit the models like this to get the out-of-bag estimates of performance.
# step_bagimpute could also be used.
set.seed(3453)
diam_fit <- bagging(Diameter ~  ., data = scat[, -1],
nbagg = 50, coob = TRUE)
diam_res <- getModelInfo("treebag")[[1]]$oob(diam_fit)
set.seed(3453)
mass_fit <- bagging(Mass ~  ., data = scat[, -1],
nbagg = 50, coob = TRUE)
mass_res <- getModelInfo("treebag")[[1]]$oob(mass_fit)
scat_bag <-
scat_missing %>%
mutate(method = "Bagged Tree",
diam_imp = Diameter, mass_imp = Mass)
scat_bag$diam_imp[is.na(scat_bag$Diameter)] <-
predict(diam_fit, scat[is.na(scat$Diameter),])
scat_bag$mass_imp[is.na(scat_bag$Mass)] <-
predict(mass_fit, scat[is.na(scat$Mass),])
imputed <- bind_rows(scat_knn, scat_bag)
ggplot(imputed, aes(col = was_missing)) +
geom_point(aes(x = diam_imp, y = mass_imp), alpha = .5, cex = 2) +
geom_rug(data = imputed[is.na(imputed$Mass),],
aes(x = Diameter),
sides = "b",
lwd = 1) +
geom_rug(data = imputed[is.na(imputed$Diameter),],
aes(y = Mass),
sides = "l",
lwd = 1) +
theme(legend.position = "top") +
xlab("Diameter") + ylab("Mass") +
facet_wrap(~method)
imp_knn <-
recipe(Species ~ ., data = scat) %>%
step_knnimpute(Diameter, Mass,
impute_with =
imp_vars(Month, Year, Site, Location,
Age, Number, Length, ropey,
segmented, scrape)) %>%
prep(training = scat, retain = TRUE) %>%
juice(Diameter, Mass) %>%
set_names(c("diam_imp", "mass_imp")) %>%
mutate(method = "5-Nearest Neighbors")
imp_knn <-
recipe(Species ~ ., data = scat) %>%
step_impute_knn(Diameter, Mass,
impute_with =
imp_vars(Month, Year, Site, Location,
Age, Number, Length, ropey,
segmented, scrape)) %>%
prep(training = scat, retain = TRUE) %>%
juice(Diameter, Mass) %>%
set_names(c("diam_imp", "mass_imp")) %>%
mutate(method = "5-Nearest Neighbors")
scat_knn <- bind_cols(scat_missing, imp_knn)
# Fit the models like this to get the out-of-bag estimates of performance.
# step_bagimpute could also be used.
set.seed(3453)
diam_fit <- bagging(Diameter ~  ., data = scat[, -1],
nbagg = 50, coob = TRUE)
diam_res <- getModelInfo("treebag")[[1]]$oob(diam_fit)
set.seed(3453)
mass_fit <- bagging(Mass ~  ., data = scat[, -1],
nbagg = 50, coob = TRUE)
mass_res <- getModelInfo("treebag")[[1]]$oob(mass_fit)
scat_bag <-
scat_missing %>%
mutate(method = "Bagged Tree",
diam_imp = Diameter, mass_imp = Mass)
scat_bag$diam_imp[is.na(scat_bag$Diameter)] <-
predict(diam_fit, scat[is.na(scat$Diameter),])
scat_bag$mass_imp[is.na(scat_bag$Mass)] <-
predict(mass_fit, scat[is.na(scat$Mass),])
imputed <- bind_rows(scat_knn, scat_bag)
ggplot(imputed, aes(col = was_missing)) +
geom_point(aes(x = diam_imp, y = mass_imp), alpha = .5, cex = 2) +
geom_rug(data = imputed[is.na(imputed$Mass),],
aes(x = Diameter),
sides = "b",
lwd = 1) +
geom_rug(data = imputed[is.na(imputed$Diameter),],
aes(y = Mass),
sides = "l",
lwd = 1) +
theme(legend.position = "top") +
xlab("Diameter") + ylab("Mass") +
facet_wrap(~method)
scat_knn
View(scat_knn)
library(readxl)
Distocia <- read_excel("~/Laboratorio/Trabalho 4/Distocia.xlsx",
skip = 1,na = "NA",)
visdat::vis_guess(Distocia)+
theme(legend.position = "bottom",
legend.background = element_rect(colour = "lightgray", size = .6),
axis.text.x = element_text(hjust = 0.03))
visdat::vis_miss(x)
Distocia <- read_excel("~/Laboratorio/Trabalho 4/Distocia.xlsx",
skip = 1,na = "NA",)
visdat::vis_miss(x)
#valores faltantes NAs
length(Distocia[!complete.cases(Distocia),])
d= unique(Distocia$NRO)
length(Distocia$NRO)
x =  Distocia[!duplicated(x$NRO),]
x
View(Distocia)
Distocia <- read_excel("~/Laboratorio/Trabalho 4/Distocia2.xlsx",
skip = 0,na = "NA",)
Distocia
visdat::vis_miss(x)
visdat::vis_miss(Distocia)
Distocia <- read_excel("~/Laboratorio/Trabalho 4/Distocia2.xlsx",
skip = 0,na = "NA",)
visdat::vis_miss(Distocia)
Distocia <- read_excel("~/Laboratorio/Trabalho 4/Distocia2.xlsx",
skip = 0,na = "NA",)
visdat::vis_miss(Distocia)
